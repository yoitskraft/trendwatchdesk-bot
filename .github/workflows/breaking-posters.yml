name: TWD Breaking Posters (event-driven)

on:
  # Adjust cadence as you like. For testing, every 10 min; production could be every 30-60 min.
  schedule:
    - cron: "*/10 * * * *"
  workflow_dispatch:

jobs:
  posters:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade yfinance pillow pandas numpy requests pytz urllib3

      - name: Prepare output/state dirs (ensure folder exists even if no news)
        run: |
          mkdir -p output/posters
          mkdir -p state
          echo '{"status":"init","utc":"'$(date -u +%FT%TZ)'"}' > output/posters/status.json

      # Restore the last seen headlines / cooldown from posters branch if it exists
      - name: Restore previous poster state
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          set -e
          rm -rf _pst && mkdir _pst
          cd _pst
          git init
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote add origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${REPO}.git"
          git fetch --depth=1 origin posters || true
          if git rev-parse --verify origin/posters >/dev/null 2>&1 ; then
            git checkout -b posters origin/posters
            test -f state/seen_stories.json && cp state/seen_stories.json ../state/ || true
          else
            echo "No posters branch yet."
          fi
          cd ..

      - name: Run posters mode
        env:
          PYTHONUNBUFFERED: "1"
          TWD_MODE: "posters"
          TWD_DEBUG: "1"                      # verbose logs (set "0" when stable)
          TWD_BREAKING_ON: "on"
          # ---- Filters / knobs ----
          TWD_BREAKING_RECENCY_MIN: "90"      # consider news <= 90 minutes old
          TWD_BREAKING_MIN_SOURCES: "3"       # require â‰¥ 3 distinct publishers
          TWD_BREAKING_MIN_INTERVAL_MIN: "30" # cooldown (mins) between posters
          TWD_BREAKING_FALLBACK: "off"        # set "on" to allow single-source fallback
          # ---- Assets ----
          BRAND_LOGO_PATH: "assets/brand_logo.png"
        run: |
          set -x
          python -u main.py 2>&1 | tee run.log

      - name: Show run.log
        if: always()
        run: |
          echo "===== BEGIN run.log ====="
          (test -f run.log && cat run.log) || echo "run.log missing"
          echo "===== END run.log ====="

      - name: Debug output
        if: always()
        run: |
          echo "== posters listing =="
          ls -la output/posters || true
          echo "== state listing =="
          ls -la state || true

      - name: Count posters
        id: checkposter
        run: |
          COUNT=$(find output/posters -maxdepth 1 -type f -name "news_*.png" 2>/dev/null | wc -l | tr -d ' ')
          echo "posters_count=$COUNT" >> $GITHUB_OUTPUT
          echo "Generated posters: $COUNT"
          # update status.json with summary so branch always shows activity
          jq -n --arg utc "$(date -u +%FT%TZ)" --arg count "$COUNT" \
            '{status:"ok", utc:$utc, posters_count:($count|tonumber)}' > output/posters/status.json || \
          echo '{"status":"ok","posters_count":0}' > output/posters/status.json

      - name: Publish to 'posters' branch (single-commit, always push heartbeat)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          set -e
          rm -rf publish && mkdir publish
          cp -r output/posters publish/
          mkdir -p publish/state
          cp -f state/seen_stories.json publish/state/ || true

          cd publish
          git init
          git checkout -b posters
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote add origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${REPO}.git"

          git add -A
          git commit -m "Posters heartbeat $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          git push -f origin posters

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: posters-run-${{ github.run_id }}
          path: |
            run.log
            output/posters/**
            state/seen_stories.json
