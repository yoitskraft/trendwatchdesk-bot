name: TrendWatchDesk Generate

on:
  schedule:
    - cron: "10 7 * * 1,3,5"   # Run Mon/Wed/Fri at 07:10 UTC
  workflow_dispatch:            # Allow manual trigger from Actions tab

concurrency:
  group: trendwatchdesk-generate
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      PYTHONUNBUFFERED: "1"

      # ---------------- Chart Settings ----------------
      TWD_TF: "D"                # Chart timeframe: "D" for daily (~1y), "W" for weekly (~60 bars)
      TWD_4H_LOOKBACK_DAYS: "120" # Lookback for 4h swing analysis in days
      TWD_SWING_WINDOW: "3"       # Swing point sensitivity (higher = fewer swings)
      TWD_ATR_LEN: "14"           # ATR length for volatility calc
      TWD_ZONE_PCT_TOL: "0.004"   # Min width of support/resistance zones (as % of price range)

      # ---------------- UI Scaling ----------------
      TWD_UI_SCALE: "0.90"        # Overall chart scaling (smaller = more margin)
      TWD_TEXT_SCALE: "0.70"      # Font scaling for headers & labels
      TWD_TLOGO_SCALE: "0.55"     # Scale for top-right ticker logo (0.55 = 55%)
      TWD_BRAND_MAXH: "220"       # Max height (px) of bottom-right TrendWatchDesk logo
      TWD_BRAND_MARGIN: "56"      # Margin (px) from edges for brand logo

      # ---------------- Caption Chatter Settings ----------------
      TWD_PT_CHATTER: "on"        # "on" enables random bank PT mentions, "off" disables
      TWD_PT_CHANCE: "8"          # Chance denominator for chatter: 8 = 1 in 8 captions (on average)

      # ---------------- External API / Assets ----------------
      NEWSAPI_KEY: ${{ secrets.NEWSAPI_KEY }}  # Optional NewsAPI key (falls back to yfinance headlines)
      BRAND_LOGO_PATH: assets/brand_logo.png   # Path to TrendWatchDesk logo inside repo

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Show Python & pip
        run: |
          python --version
          pip --version

      - name: Install baseline deps
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade yfinance pillow pandas numpy requests pytz urllib3

      - name: Install project requirements (optional)
        if: hashFiles('requirements.txt') != ''
        run: |
          pip install -r requirements.txt || true

      - name: Ensure output folder
        run: |
          mkdir -p output
          echo "Output dir:" && pwd && ls -la output || true

      - name: Verify assets exist (logos/fonts)
        run: |
          ls -la assets || true
          ls -la assets/logos || true
          ls -la assets/fonts || true
          test -f "${BRAND_LOGO_PATH}" && echo "Brand logo OK: ${BRAND_LOGO_PATH}" || echo "Brand logo missing (will skip)."

      - name: Run bot (tee log)
        run: |
          set -x
          python -u main.py 2>&1 | tee run.log

      - name: Print run.log to console
        if: always()
        run: |
          echo "===== BEGIN run.log ====="
          (test -f run.log && tail -n 400 run.log) || echo "run.log missing"
          echo "===== END run.log ====="

      - name: Debug output folder
        if: always()
        run: |
          echo "== output listing =="
          ls -la output || true
          echo "== any pngs =="
          find output -maxdepth 1 -type f -name "*.png" -printf "%f\n" 2>/dev/null || true
          echo "== any captions =="
          find output -maxdepth 1 -type f -name "caption_*.txt" -printf "%f\n" 2>/dev/null || true

      - name: Require charts
        if: always()
        run: |
          set -e
          COUNT=$(find output -maxdepth 1 -type f -name "*.png" 2>/dev/null | wc -l | tr -d ' ')
          echo "PNG count: $COUNT"
          if [ "$COUNT" = "0" ]; then
            echo "::error::No charts generated. Check run.log above for errors."
            exit 1
          fi

      - name: Publish outputs to 'charts' branch (single force-push)
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          set -e
          test -d output
          ls output/* >/dev/null 2>&1

          rm -rf publish && mkdir publish
          cp -r output/* publish/

          cd publish
          git init
          git checkout -b charts
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git remote add origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${REPO}.git"
          git add -A
          git commit -m "Publish outputs $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          git push -f origin charts

      - name: Upload artifacts (logs + outputs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-${{ github.run_id }}
          path: |
            run.log
            output/**
