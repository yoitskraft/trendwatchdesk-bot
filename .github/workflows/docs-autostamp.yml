name: Docs Autostamp

on:
  workflow_run:
    workflows:
      - "TrendWatchDesk Generate"              # must match your charts workflow name exactly
      - "TWD Breaking Posters (event-driven)"  # must match your posters workflow name exactly
    types:
      - completed
  workflow_dispatch: {}

jobs:
  stamp:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Write the autostamp script into the repo (idempotent each run)
      - name: Create docs/autostamp.py
        shell: bash
        run: |
          mkdir -p docs
          cat > docs/autostamp.py <<'PY'
#!/usr/bin/env python3
import os, datetime, re, subprocess
from pathlib import Path

ROOT = Path(__file__).resolve().parents[1]
GUIDE = ROOT / "OPERATIONS_GUIDE.md"
README = ROOT / "README.md"

def _env(k, default=""):
    v = os.getenv(k)
    return v if v is not None and v != "" else default

def stamp_block():
    now_utc = datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")
    mode         = _env("TWD_MODE")                 # charts | posters | all
    tf           = _env("TWD_TF", "D")              # D | W
    recency      = _env("TWD_BREAKING_RECENCY_MIN")
    min_sources  = _env("TWD_BREAKING_MIN_SOURCES")
    fallback     = _env("TWD_BREAKING_FALLBACK")
    allow_rss    = _env("TWD_ALLOW_RSS")
    wl           = _env("TWD_WATCHLIST")
    charts_br    = _env("TWD_CHARTS_BRANCH", "charts")
    posters_br   = _env("TWD_POSTERS_BRANCH", "posters")
    trigger_name = _env("TWD_TRIGGER_NAME")

    lines = []
    lines.append("<!-- TWD_STATUS:BEGIN -->")
    lines.append("")
    lines.append("## Automation Status (auto-generated)")
    lines.append(f"- **Last run:** {now_utc}")
    if trigger_name:
        lines.append(f"- **Triggered by:** {trigger_name}")
    if mode:
        lines.append(f"- **Mode:** `{mode}`   ·  **Timeframe:** `{tf}`")
    knobs = []
    if recency:     knobs.append(f"recency={recency}m")
    if min_sources: knobs.append(f"min_sources={min_sources}")
    if fallback:    knobs.append(f"fallback={fallback}")
    if allow_rss:   knobs.append(f"rss={allow_rss}")
    if knobs:
        lines.append(f"- **Breaking-posters knobs:** {', '.join(knobs)}")
    if wl:
        wl_list = [s.strip() for s in wl.split(",") if s.strip()]
        preview = ", ".join(wl_list[:20]) + (" …" if len(wl_list) > 20 else "")
        lines.append(f"- **Watchlist (preview):** {preview}")
    lines.append(f"- **Publish targets:** charts → `{charts_br}`, posters → `{posters_br}`")
    lines.append("")
    lines.append("<!-- TWD_STATUS:END -->")
    lines.append("")
    return "\n".join(lines)

def upsert_block(file_path: Path, block: str):
    content = file_path.read_text(encoding="utf-8") if file_path.exists() else ""
    if "<!-- TWD_STATUS:BEGIN -->" in content and "<!-- TWD_STATUS:END -->" in content:
        new = re.sub(
            r"<!-- TWD_STATUS:BEGIN -->.*?<!-- TWD_STATUS:END -->",
            block,
            content,
            flags=re.S
        )
    else:
        sep = "\n\n---\n\n" if content.strip() else ""
        new = content + sep + block
    if new != content:
        file_path.write_text(new, encoding="utf-8")
        return True
    return False

def ensure_file(path: Path, title: str):
    if not path.exists():
        path.write_text(f"# {title}\n\n", encoding="utf-8")

def main():
    block = stamp_block()
    ensure_file(GUIDE, "TrendWatchDesk — Operations Guide")
    ensure_file(README, "TrendWatchDesk — README")

    changed = False
    changed |= upsert_block(GUIDE, block)
    changed |= upsert_block(README, block)

    if changed:
        print("[info] docs updated")
        os.chdir(ROOT)
        subprocess.run(["git", "add", "OPERATIONS_GUIDE.md", "README.md"], check=False)
    else:
        print("[info] docs already up-to-date; no changes")

if __name__ == "__main__":
    main()
PY
          chmod +x docs/autostamp.py

      # Derive env from the triggering workflow name (safe for both triggers/manual)
      - name: Derive status env
        shell: bash
        run: |
          TRIGGER="${{ github.event.workflow_run.name }}"
          if [ -z "$TRIGGER" ]; then TRIGGER="manual"; fi
          echo "TWD_TRIGGER_NAME=$TRIGGER" >> $GITHUB_ENV
          # Guess mode from trigger name
          case "$(echo "$TRIGGER" | tr '[:upper:]' '[:lower:]')" in
            *poster*) MODE="posters" ;;
            *)        MODE="charts"  ;;
          esac
          echo "TWD_MODE=$MODE" >> $GITHUB_ENV

          # Document your typical knobs (adjust if you want different defaults)
          echo "TWD_TF=D" >> $GITHUB_ENV
          echo "TWD_BREAKING_RECENCY_MIN=720" >> $GITHUB_ENV
          echo "TWD_BREAKING_MIN_SOURCES=1" >> $GITHUB_ENV
          echo "TWD_BREAKING_FALLBACK=on" >> $GITHUB_ENV
          echo "TWD_ALLOW_RSS=on" >> $GITHUB_ENV
          echo "TWD_CHARTS_BRANCH=charts" >> $GITHUB_ENV
          echo "TWD_POSTERS_BRANCH=posters" >> $GITHUB_ENV
          echo "TWD_WATCHLIST=AAPL,MSFT,NVDA,AMD,TSLA,SPY,QQQ,GLD,AMZN,META,GOOGL" >> $GITHUB_ENV

      - name: Run autostamp
        run: python docs/autostamp.py

      - name: Commit docs if changed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -e
          if git diff --staged --quiet; then
            echo "No doc changes to commit."
            exit 0
          fi
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git commit -m "docs: autostamp $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          git push
